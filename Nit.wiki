Feel free to add new categories as necessary.

This is where you register features that are unimplemented or badly implemented in the new Qt dialogs

Features marked with {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} must be implemented before TortoiseHg 2.0 is out of beta.

== SJB short term TODO ==

* merge/resolve: deal with subrepositories that may require resolves
* issue #103
* manifest: disable menu entries that are not connected, finish in 2.1

== repo registry ==

* make reordering of groups (along with their content) possible (see also #52)
* multi-selection menu with 'Pull from default', 'Pull -u from default'
* ask for name of new group at creation
* CTRL+drag looks like a copy, but actually performs a move
* RepoTreeModel should emit dataChanged signal when repo.shortname changed.

== General ==

* minimize/maximize buttons on all appropriate dialogs and main windows
* be more verbose in window titles
* limit the size (in MB) of the graph data cache.  Perhaps an LRU of revisions.
* Qsci tab stops suffer from off-by-one when showing diffs, see rejects.py for potential workaround.
* qtlib.ExpanderLabel needs to manage its own sub-layout
* Go through hglib and move applicable routines to thgrepo, fix hgqt usage

== chunks/shelve ==

* multi-select file list (not for 2.0)
* file/diff toolbar buttons (not for 2.0)

== Revset/Filter toolbar ==

* entries in branch combo should have the configured branch color (not for 2.0)

== Workbench ==

* commit tab SVG should match shell extension icon (or vice-versa)
* paint tag names on right side of description
* longsummary() should take a width and use a glyph when supported
* generic progress bars for most operations, to show busy state
* Dragging of filenames does not work into Visual Studio or Skype (wrong URI type?, permissions?)
* patch csinfo in revpanel should show path to patch

== file history dialog ==

* handle menu events from repoview
* diff to local revision menu option
* handle search/edit events from HgFileView
* interface to grep at revision or disable those menus

== qreorder ==

* show patch numbers (in series), and rev numbers of applied
* allow more than one patch to be selected for reordering as a group
* when a reorder was done, and you rename a patch via the cmenu of the list, the reordering is undone
* make the dialog show the summary with min 80 chars

== RevDetailsWidget ==

* add 'other parent' toggle action to fileview, remove from revdetails
* filelistview: forward menu events to parent (revdetails or chunks)
* investigate hgview's recent support for reST in changelog messages
* space-efficient diff viewer like one of hgtk
** combine RevMessage and HgFileView (diff view) so that RevMessage can be scrolled out; current diff view is too small. (i'm not convinced this would be an improvement, please discuss on list first - sjb)
** provide a way to show all diffs at once, like "[All Files]" of hgtk. - yuja

== Compress ==

* warn if compressing a merge

== Manifest Viewer ==

* GOAL: merge functionality with revDetailsWidget (after 2.0 release)

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} right-clicking on files should allow a diff-to-parent for affected files only.
* interface to grep at revision
* Complete the annotate view with the hovering info as in the separate annotate dialog ?
* filter files by name.
* indicate affected folders by overlay icon or font style, like the 'Changes' column in the Gtk version.
* change filename color by status (see the status view).
* support 'unknown' and 'ignored' files for working copy.
* show also subrepo tree
* flat view for files list
* ability to show changeset description
* merge with annotate dialog? with optional filetree dock.
* move filter bar to be on the content side of the splitter, like commit & revdetails

== status / wctxactions ==

(after 2.0 release)
* switch wctxactions to generate QActions for parent widget
* QActions should be given shortcuts and icons
* restrict action sensitivity based on selected files
* give status/wctxactions a cmdui.Runner()
* switch commit and quickop to use status' Runner
* add a 'second parent' toggle toolbar button to fileview, remove from filelistmodel
* use Qt's filesystem monitor to report when the working folder is dirty

== backout, compress, rebase, bisect ==

(after 2.0 release)
* turn into a QWizard based dialogs
* clean up merge wizard

== Commit ==

* smarter commit button enabled logic (message entered, file selected, etc)
* add support for tortoisehg.ciexclude
* spell check (perhaps there's an http service we can use for post-validation?)
* in-memory patching / committing chunk selected files

== Clone ==

* clone --pull's progress bars cause the dialog to grow horizontally dynamically.. ugh.  I propose we filter the progress events and elipsize (is that a verb?) the progress strings.
* Add a textbox for the 'Include patch queue' option, so the user can enter a path herself (implements the '-P <repo>' option of qclone). Maybe even add a 'Browse' button for selecting a folder.
* Add a 'Hg command' textbox, as in the init dialog.

== Settings ==

* unicode decode issues
* path validation for ui.editor and similar fields
* new generic extension registration
* more font settings
* connect to thgrepo.configChanged and refresh
* 'issue tracking' page (bugtraq)

== Email ==

* show output/progress by default
** I'm thinking of single-line status, which shows the current activity, e.g.  "Sending [PATCH 0/1] xxxx". Maybe I should provide more details, though. - yuja
* clean implementation for --bundle
* threaded preview
* replace to/from/cc combo boxes with entry and [...] that opens address book style dialog
* perhaps changeset list could be in a second tab, before preview
* drag and drop revisions from RepoWidget to email dialog.

== Sync ==

* expose default-push in some way
* parse push/pull output for indication of work done
* keyring doesn't work on KDE (with KWallet). It looks threading issue. See
  http://bitbucket.org/tortoisehg/stable/issue/1437/gui-freeze-on-suse-linux-after-
using

== Annotate ==

* nix the standalone annotate dialog, always use manifest but open to a given file
* context menu should offer toggle between revision number, username or both
* In the gtk version there's a possibility to assign colors to the usernames in the changelog. Maybe those same colors could be used per user in the annotate window too ? (SJB - this is now complicated by the 32-color restriction in Qsci)
** And the colors in the annotate dialog for not configured users perhaps could be assigned with the same 'logic' as in the changelog
** I could also add an extra page to the setting dialog, for assigning colors to usernames?
** I also see the hgqt changelog does not yet use those username color settings. I could look into that too?
* merge annotate.Annotate with fileview.HgFileView (after 2.0)
* support annotation of working copy (rev=None); needs changes on Mercurial-side.

== docklog (ConsoleWidget) ==

* command completion by TAB key
* command history by up/down key
* pager for long outputs
* sophisticated 'thg' command, e.g. 'thg grep' to switch task tab.
* accept ctrl+c for command termination
* delay repo switch while running command

== Rename dialog ==

* implement enhancements from issues 1124 + 1186
* enhancement #1604

== qtlib ==

* pre-defined colors (like gtklib) (most colors will be user-configurable - steve)
* appropriate use of QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
* utilize QIcon.fromTheme() (we should probably adopt a standardized naming scheme first)?

== Bisect Dialog ==

* Connect repoview clicks to dialog input events (must be non-modal, low priority)
* annotate graph with .hg/bisect.state (low priority)

== MQ ==
* qqueue dialog : When attempting to activate another patch queue when there are still patches applied, there is an error message given. But when the qqueue dialog is run from the mq tasktab (insgtead of from the command line), that message almost instantly disapears. (SJB - I think I fixed this, can you verify?)

== About ==

* Freeze on closing dialog until urllib2.urlopen() finishes (uthread.wait() blocks main thread)
** In this case, thread2._async_raise() trick does not work. Needs unblocking io or short timeout value, at least. (SJB this is a Python limitation, not likely to be fixed by our code).
*** Yes, but some workarounds are necessary IMO. It always freezes 10sec or so where internet connection needs http proxy. - yuya

== i18n ==

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Update i18n message catalog for PyQt port
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Fix possible unicode-related issues
* Need an encode fail dialog that prompts for an encoding, sets HGENCODING, then retries
* Utilize Mercurial's localstr if possible: http://selenic.com/repo/hg/rev/7cc4263e07a9
* Content encoding for diff / annotate view; Maybe it has fallback list by locale, e.g. 'utf-8, cp932, euc-jp, iso-2022-jp' for ja_JP.

== usability ==

* Set coherent tab order in all dialogs:  http://doc.qt.nokia.com/4.7/focus.html
* Session management; QApplication::commitData()
* Enforce standard accelerators: http://doc.qt.nokia.com/4.6/accelerators.html
* More Mac OS X goodies: http://www.crossplatform.ru/?q=node/298

* Fonts
** use qtlib.getfont interface consistently in all our tools
** add runtime font scaling mechanism
* Respect Windows font setting like modern apps:
  http://groups.google.co.jp/group/thg-dev/browse_thread/thread/5f9bb7141e4f66e3

== Documentation ==

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Update documentation
* Update localized documents (as possible) ... I heard Sphinx 1.1 introduces gettext-based i18n system - yuya (after 2.0 release?)
