Feel free to add new categories as necessary.

This is where you register features that are unimplemented or badly implemented in the new Qt dialogs

Features marked with {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} must be implemented before TortoiseHg 2.0 is out of beta.

== installer ==

* kdiff3 x64 (requires VC built x64 PyQt package from Riverbank)

== {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} bookmarks ==

* add/move/rename/remove (already present in TortoiseHg)
* bookmark selection for push/pull/incoming/outgoing (missing in TortoiseHg)

== repo registry ==

* make reordering of groups (along with their content) possible (in progress, Johan)
* multi-selection menu with 'Pull from default', 'Pull -u from default'

== General ==

* QTimer errors after revset queries or goto bar search
* limit the size (in MB) of the graph data cache.  Perhaps an LRU of revisions.
* Qsci tab stops suffer from off-by-one when showing diffs.  Might not be much we can do about it, beyond moving the +/- column into a margin.
* Qsci generic context menu to toggle wrap

== Visdiff ==

* snapshot folders should be created read-only to give a hint to editors that edits to the history files are quite useless.  The cleanup code in atexit must be improved to make the files read/write again so they can be deleted.

== Workbench ==

* CTRL-D filelistview shortcut hides the changeset CTRL-D shortcut
* generic progress bars for most operations, to show busy state
* Dragging of filenames does not work into Visual Studio (wrong URI type?, permissions?)
* patch csinfo in revpanel should show path to patch
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} MQ patches remaining work - see [[http://groups.google.com/group/thg-dev/browse_thread/thread/3c9dd639c1c54b58|discussion]]
** rename - should be easy
** fold - should be easy to implement. Could benefit from a dialog confirming what will be folded and a --keep option checkbox.
** reorder - improve qreorder dialog, it should warn if any comments or guards are in use, as they will be lost if you allow the dialog to write a new status file
** Add support for multiple mq patch queues (hg qqueue).

== RevDetailsWidget ==

* investigate hgview's recent support for reST in changelog messages
* space-efficient diff viewer like one of hgtk
** combine RevMessage and HgFileView (diff view) so that RevMessage can be scrolled out; current diff view is too small. (i'm not convinced this would be an improvement, please discuss on list first - sjb)
** provide a way to show all diffs at once, like "[All Files]" of hgtk. - yuja

=={{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Bisect Dialog ==

* Connect repoview clicks to dialog input events (must be non-modal, low priority)
* annotate graph with .hg/bisect.state (low priority)

== Manifest Viewer ==

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} GOAL: merge functionality with revDetailsWidget

* context menu for: open in editor, file history, annotate, etc
** {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} right-clicking on files should allow a diff-to-parent for affected files only.
* interface to grep at revision
* Complete the annotate view with the hovering info as in the separate annotate dialog ?
* filter files by name.
* indicate affected folders by overlay icon or font style, like the 'Changes' column in the Gtk version.
* change filename color by status (see the status view).
* support 'unknown' and 'ignored' files for working copy.
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} subrepo?
* flat view for files list
* ability to show changeset description
* merge with annotate dialog? with optional filetree dock.

== Commit ==

* add support for tortoisehg.ciexclude
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} qnew/shelve-patch creation dialog (in another file)
* spell check
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} in-memory patching / committing chunk selected files
* hard crash after using details widget and committing

{{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Safe chunk select / "move to patch" implementation:
# Teach hgshelve to parse non-git diffs, drop git diffs everywhere, detect binary/perm/copies ourselves
# When chunk select dialog is opened, record hash of raw contents
# When revert or "move to patch" is selected, re-read file and compare hash
# To revert chunks, backup file to "trashcan" with timestamp in name, revert contents then apply remaining chunks
# To "move to patch", revert then apply remaining, then do diff against original raw file > patch file

== Clone ==

* clone --pull's progress bars cause the dialog to grow horizontally dynamically.. ugh

== Update ==

* save to patch unimplemented (waiting for Qt patch library)

== Search/grep ==

* No activity display, so can't tell it is actually searching. More controls should probably disable when searching.
* Should be able to cancel a search.

== Merge ==

* temporary patch name

== Settings ==

* unicode decode issues
* expose ui.traceback as a debugging aid
* path validation for ui.editor and similar fields
* new generic extension registration
* more font settings
* new [color] page
* connect to thgrepo.configChanged and refresh
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} somehow edited lines contain ^M (CR) even on Unix; not always ?

== Email ==

* show output/progress by default
** I'm thinking of single-line status, which shows the current activity, e.g.  "Sending [PATCH 0/1] xxxx". Maybe I should provide more details, though. - yuja
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} bundle support
* threaded preview
* replace to/from/cc combo boxes with entry and [...] that opens address book style dialog
* perhaps changeset list could be in a second tab, before preview
* drag and drop revisions from RepoWidget to email dialog.

== Sync ==

* use toolbar buttons for push/pull/in/out
* add a bookmark combo, graph selection should update the combo
* disallow url drops to line-entries, force drop on parent widget
* write keyring/auth help
* keyring doesn't work on KDE (with KWallet). It looks threading issue. See
  http://bitbucket.org/tortoisehg/stable/issue/1437/gui-freeze-on-suse-linux-after-
using

== Annotate ==

* In the gtk version there's a possibility to assign colors to the usernames in the changelog. Maybe those same colors could be used per user in the annotate window too ? And the colors in the annotate dialog for not configured users perhaps could be assigned with the same 'logic' as in the changelog ? That would be another bit of consistency in the product. I could also add an extra page to the setting dialog, for assigning colors to usernames ? I also see the hgqt changelog does not yet use those username color settings. I could look into that too ? (If you agree with the idea(s) Steve, I (Johan) am willing to give this a stab.) -- sjb sounds like a solid idea

* Replace HgView's annotator by thg's. Hook at fileview.HgFileView.
* username margin
* support annotation of working copy (rev=None); needs changes on Mercurial-side.

== docklog (ConsoleWidget) ==

* command completion by TAB key
* command history by up/down key
* pager for long outputs
* sophisticated 'thg' command, e.g. 'thg grep' to switch task tab.
* accept ctrl+c for command termination
* delay repo switch while running command

== Rename dialog ==

* implement enhancements from issues 1124 + 1186
* enhancement #1604

== qtlib ==

* replace 'yellow' with some reasonable default, like 'lightbrown'
* pre-defined colors (like gtklib) (most colors will be user-configurable - steve)
* appropriate use of QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
* utilize QIcon.fromTheme() ?

== i18n ==

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Update i18n message catalog for PyQt port
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Fix possible unicode-related issues
* Need an encode fail dialog that prompts for an encoding, sets HGENCODING, then retries
* Utilize Mercurial's localstr if possible: http://selenic.com/repo/hg/rev/7cc4263e07a9
* Content encoding for diff / annotate view; Maybe it has fallback list by locale, e.g. 'utf-8, cp932, euc-jp, iso-2022-jp' for ja_JP.

== usability ==

* Set coherent tab order in all dialogs:  http://doc.qt.nokia.com/4.7/focus.html
* Go through hglib and move applicable routines to thgrepo, fix hgqt usage
* Session management; QApplication::commitData()
* Enforce standard accelerators: http://doc.qt.nokia.com/4.6/accelerators.html
* More Mac OS X goodies: http://www.crossplatform.ru/?q=node/298

* Fonts
** I would like to have a really good way to change fonts in the TortoiseHg qt dialogs. Mostly for enlarging fonts, but in small steps, so each can find their own "best setting". All fonts means both for dialog fonts and for content widgets. This is necessary f.i. for people not having the good sight of a youngster anymore (like me). (Also because changing screen resolution and/or OS settings cannot solve everything.) I'm willing to help with this, of course. My reference for this is the NoSquint Firefox add-on ;-).
** SJB - I've started work on this.  Apps can get the user's configured font from qtlib and connect to a signal emitted when the font is changed.  The settings tool in turn will emit the signal when the user picks a new font and selects 'ok' in the font editor.  Two things need to happen:
## We must use this font interface consistently in all our tools
## Someone should look into connecting to the live updates that come out of the selection dialog

* Respect Windows font setting like modern apps:
  http://groups.google.co.jp/group/thg-dev/browse_thread/thread/5f9bb7141e4f66e3

== Documentation ==

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Update documentation