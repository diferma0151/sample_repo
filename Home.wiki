= TortoiseHg PyQt Port =

Future official home of the TortoiseHg development repository; currently the home of the PyQt port.

* Mailing list: http://groups.google.com/group/thg-dev/about?hl=en
* File a bug/nit on our [[Nit]] list

== Grand Plans ==

TortoiseHg 2.0, scheduled for November 1, 2010, is slated to have PyQt replacements for all PyGtk dialogs

=== Main Application ===

As part of this rewrite, we would like to perform a few cleanups in the design.  The changelog browser, grep and annotate (datamine) tools, and the commit tool should be combined into a single "main application" with a tabbed interface.  This app should be usable from a desktop icon or start menu link, opening a browse window (more below) if the cwd is not within a repository.

=== "Patches" Widget ===

I prefer not porting the MQ features that have been integrated into the GTK changelog browser and commit tools, and instead create a "patches" tab in the main application.  The "patches" tab would show the patch queue, allow patches to be dragged into it, show the contents of selected patches, and support all the MQ commands (push, pop, refresh, etc).  It should also be able to apply patches to the working directory without commiting, and manage patches that are not in the MQ series file.  This tab should perhaps have a console pane to show command output.

=== "Sync" Widget ===

A tab of the main application should replace the "paths" page of the settings tool.  It should show all configured paths for the repository, allow this list to be modified, and support sync operations with each remote target.. including preview incoming w/ bundle (perhaps creating a new changelog tab), annotating outgoing changes, etc.  We could also put a console pane and progress bar on this tab to show running operations.  Some operations could be banned for certain URLs (p4, svn, git, etc).

=== Simplify Commit, Drop Shelve ===

I also prefer to not port the shelve tool.  Instead, the commit tool should allow change hunks to be moved into patches (or just reverted).  In fact, qnew should simply be the act of moving changes into a patch, then pushing it.  The commit tool should always show working diffs, even if there are patches applied.  Moving hunks between patches or the working directory should be tasks for the patches widget.

=== Browse Widget ===

Currently being implemented as a "registry" widget in the workbench

== Would you like to help? ==

If people are looking for places to get started, from easiest to hardest, there's:

# about - (partially done (needs threading added): **Johan**)
# init
# rename / move
# archive - (in progress: **Johan**)
# tags
# backout
# email - (partially done: **Yuya**)
# clone - (in progress: **Yuki**)
# hgignore - (in progress: **Steve**)
# web serve - (in progress: **Yuya**)
# strip
# merge - using [[http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/html/qwizard.html|QWizard]]? ([[http://doc.qt.nokia.com/qq/qq22-qwizard.html|example]])
# quickop - (done)
# visdiff - (done)
# guess renames
# settings/thgconfig - (mostly done)
# "main" application framework
* grep - (mostly done)
* annotate
* patches
* status/commit - (on hold: **Steve**)
* changelog - "borrowed" from hgview, still needs work

Plus basic details like common keyboard accelerators, app icons

The synchronize and recovery tools will be swallowed whole by the workbench app.

Please send an e-mail to thg-dev if you start working on something so we do not duplicate effort.