Feel free to add new categories as necessary.

This is where you register features that are unimplemented or badly implemented in the new Qt dialogs

== Workbench ==

* toolbar toggle push buttons for showing log dock and repo registry
* refresh/reload should not switch task tabs
* startup with cold cache can abort with the timer, not have any rows to set column widths properly (still a problem?)
* need an svg for grep task tab
* need a way to just refresh the commit tool (How about making shift-F5 refresh only the active task-tab ? - sjb good idea!) (in progress - Johan)
* commit message history is not being refreshed properly after commits inside the workbench
* Multi-selection and intelligent changeset context menu (1 sel : base menu, 2 sel : merge, range menu, >2 sel: patch/email menu )
* Changeset file list menu, just like repository explorer
* Drag file names from changeset file list to editor
* Underlines of revision and node for parent/child in changeset does not follow the same baseline
* Some columns are missing (e.g. the node can be useful)
* Inline searching searches only for matches from the beginning of the line, not for whether a commit contains said text
* Hitting ctrl+g after having done an inline search one is presented with a new control to enter search criteria - at the very least this should be filled out with what you actually searched for - better, it should jump to the next match
* Filter csets per cset type (all, tagged, ancestry, parents, heads, merge, non-merge).
* Filter csets per filename.
* Filter csets per username.
* Bisect view (idea) ... it shows good/bad icon alongside each changeset; tested changesets are grayed-out.
* Authorcoloring: is it intentionally that not the whole line is colored (as in the gtk version), or is this a todo ?  (debatable, bring it up on the list).

==== history compression feature ====

Select rev A and descendant rev B.  cmenu should offer 'Compress history'.

It will update to A (if necessary), hg revert --all --rev B, then open the commit tool with the
concatenated commit messages of revisions between A and B.  User can then edit the
message and make the commit.  There should be an option to then strip the changesets
that were compressed.

Could be done as a single dialog.

== Manifest Viewer ==

Has a lot of potential:

* draggable filenames
* context menu for open in editor, file history, annotate, etc (in progress - Johan)
* interface to grep at revision
* Show the filelist as a treeview (see [[http://news.gmane.org/find-root.php?group=gmane.comp.version-control.mercurial.tortoisehg.user&article=2284|this email thread]])
  ... maybe fixed by <<changeset 1123a7baab26>>, Yuya. -- Indeed, thank you Yuya, Johan.
* manifest widget as tasktab (workbench)

== Commit ==

* qrefresh support, checkbox for -D option
* threaded / wrapped commit (need a CmdRunner equivalent)
* +1 / -1 head indication (not as important with workbench integration)
* pushafterci (not necessary if we fully support hooks)
* qnew/shelve-patch creation dialog (in another file)
* spell check / tab completion
* in-memory patching / committing chunk selected files

Safe chunk select / "move to patch" implementation:
# Teach hgshelve to parse non-git diffs, drop git diffs everywhere, detect binary/perm/copies ourselves
# When chunk select dialog is opened, record hash of raw contents
# When revert or "move to patch" is selected, re-read file and compare hash
# To revert chunks, backup file to "trashcan" with timestamp in name, revert contents then apply remaining chunks
# To "move to patch", revert then apply remaining, then do diff against original raw file > patch file

== Update ==

* "smart update" feature (incomplete)

== Merge ==

* detect unresolved conflicts in WD
* shelve feature
* temporary patch name

== Settings ==

* path validation for ui.editor and similar
* port extensions page
* new [auth] page
* new generic extension registration
* font settings
* new [color] page

== Email ==

* bundle support
* threaded preview
* rename module 'hgemail' to 'email' ?

== Sync ==

* bundle preview when in workbench
* incoming / outgoing marks
* show related local repositories, and their configured paths

== Grep ==

* add history for include and exclude names (also possible for regexp itself) as done for the latest 10 messages in the commit widget
* grep task tab should be notified of currently selected revision, auto-select that rev

== Annotate ==

* In the gtk version there's a possibility to assign colors to the usernames in the changelog. Maybe those same colors could be used per user in the annotate window too ? And the colors in the annotate dialog for not configured users perhaps could be assigned with the same 'logic' as in the changelog ? That would be another bit of consistency in the product. I could also add an extra page to the setting dialog, for assigning colors to usernames ? I also see the hgqt changelog does not yet use those username color settings. I could look into that too ? (If you agree with the idea(s) Steve, I (Johan) am willing to give this a stab.) -- sjb sounds like a solid idea

== qtlib ==

* replace 'yellow' with some reasonable default, like 'lightbrown'
* pre-defined colors (like gtklib) (most colors will be user-configurable - steve)
* more general means for showing or previewing the generated hg command (see archive dialog) (log widget)
* appropriate use of QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
* utilize QIcon.fromTheme() ?

== i18n ==

* Need an encode fail dialog that prompts for an encoding, sets HGENCODING, then retries
* Need functions to convert between unicode<->UTF-8

== run ==

* slower startup than hgtk (demandimport is never enabled, it breaks pixmap loading)
** now as fast as hgtk thanks to <<changeset decb52eebbb3>>
** Idea: do portable_fork() on early stage (before loading Qt and mercurial things.) It tooks 0.5 sec before spawning new process on my env.

* Catch certain Mercurial errors (RepoLookupError, etc) and provide a non-bug-report fallback for them.

== usability ==

* I would like to have a really good way to change fonts in the TortoiseHg qt dialogs. Mostly for enlarging fonts, but in small steps, so each can find their own "best setting". All fonts means both for dialog fonts and for content widgets. This is necessary f.i. for people not having the good sight of a youngster anymore (like me). (Also because changing screen resolution and/or OS settings cannot solve everything.) I'm willing to help with this, of course. My reference for this is the NoSquint Firefox add-on ;-).

* SJB - I've started work on this.  Apps can get the user's configured font from qtlib and connect to a signal emitted when the font is changed.  The settings tool in turn will emit the signal when the user picks a new font and selects 'ok' in the font editor.  Two things need to happen:
# We must use this font interface consistently in all our tools
# Someone should look into connecting to the live updates that come out of the selection dialog
