Feel free to add new categories as necessary.

This is where you register features that are unimplemented or badly implemented in the new Qt dialogs

== installer ==

* python-svn bindings missing
* unstable packages are not signed

== repo registry ==

* make reordering of groups (along with their content) possible
* add option to save open repo tabs when window closes, and reopen repos as saved on next restart
* open cmenu: add the new repo into the group where the rightclick happened
* rename 'delete' to 'remove' or something more verbose

== cmdui ==

* Optional run() argument to use a subprocess instead of a thread
* core must emit special progress report on cancel or failure, to close all open progress bars
* progress bars could also have close buttons

== Workbench ==

* toolbar buttons for in/out/push/pull (use default for in/pull, default-push for out/push)
* revdetails: investigate hgview's recent support for reST in changelog messages
* file dialogs
** fix column resizing
** remember geometry
* Multi-selection (<-done) and intelligent changeset context menu:
** 1 sel : base menu
** 2 sel : merge, range menu, compress history
** >2 sel: patch/email menu
* Changeset file list menu, just like repository explorer
* Drag file names from changeset file list to editor
* Inline searching searches only for matches from the beginning of the line, not for whether a commit contains said text
* Hitting ctrl+g after having done an inline search one is presented with a new control to enter search criteria - at the very least this should be filled out with what you actually searched for - better, it should jump to the next match
* Filter csets
** per cset type (all, tagged, ancestry, parents, heads, merge, non-merge).
** per filename.
** per username.
* Bisect view (idea) ... it shows good/bad icon alongside each changeset; tested changesets are grayed-out.
* Authorcoloring: is it intentionally that not the whole line is colored (as in the gtk version), or is this a todo ?  (debatable, bring it up on the list). (mailed a [RFC] to the list on sep 1)
* History compression feature (I'll tackle this, Johan)
** Select rev A and descendant rev B.  cmenu should offer 'Compress history'.
** It will update to the parent of A (if necessary), hg revert --all --rev B, then open the commit tool with the concatenated commit messages of revisions between A and B (both inclusive).  User can then edit the message and make the commit.  There should be an option to then strip the changesets
that were compressed.
** Could be done as a single dialog.
* Extensions that are only enabled in a particularly repo don't work correctly at the moment. If I have two repos, one with and one without MQ, then the repo I start in seems to control whether I get MQ facilities across all repos displayed in the workbench, regardless of an individual repo's MQ status.  [sjb - please retest]
* MQ patches remaining work - see [[http://groups.google.com/group/thg-dev/browse_thread/thread/3c9dd639c1c54b58|discussion]]
** view in revision details tab - George is looking at this
** rename - should be easy
** fold - should be easy to implement. Could benefit from a dialog confirming what will be folded and a --keep option checkbox.
** delete - needs multi-select in the log.
** reorder - up/top/down/bottom. Needs thgmq code migrating (perhaps to
thgrepo? certainly to util.something). Steve suggest making a special dialog for this one. Yes, if we have a list/tree of all unapplied patches in that dialog, we could even use d&d to reorder them.
** push/pop - all or individual. Push individual is useful when you don't think a series is going to apply and want to try each patch at a time. Push/pop all is useful when "rebasing" applied patches on a new downloaded tip. These don't really belong on a context menu (push/pop on an individual patch is just goto). On the main workbench toolbar is most obvious place.
** Unnaplied patches should use italic font
** Add support for multiple mq patch queues (hg qqueue).

== Manifest Viewer ==

* GOAL: merge functionality with revDetailsWidget

* context menu for: open in editor, file history, annotate, etc
** right-clicking on files should allow a diff-to-parent for affected files only.
* interface to grep at revision
* Complete the annotate view with the hovering info as in the separate annotate dialog ?
* filter files by name.
* search file content.
* indicate affected folders by overlay icon or font style, like the 'Changes' column in the Gtk version.
* change filename color by status (see the status view).
* support 'unknown' and 'ignored' files for working copy.
* subrepo?
* flat view for files list
* ability to show changeset description

== Commit ==

* qnew/shelve-patch creation dialog (in another file)
* spell check / tab completion
* in-memory patching / committing chunk selected files

Safe chunk select / "move to patch" implementation:
# Teach hgshelve to parse non-git diffs, drop git diffs everywhere, detect binary/perm/copies ourselves
# When chunk select dialog is opened, record hash of raw contents
# When revert or "move to patch" is selected, re-read file and compare hash
# To revert chunks, backup file to "trashcan" with timestamp in name, revert contents then apply remaining chunks
# To "move to patch", revert then apply remaining, then do diff against original raw file > patch file

== Update ==

* "smart update" feature (incomplete)

== Merge ==

* detect unresolved conflicts in WD
* shelve feature
* temporary patch name

== Settings ==

* unicode decode issues
* path validation for ui.editor and similar fields
* port extensions page from hgtk
* new generic extension registration
* more font settings
* new [color] page
* connect to thgrepo.configChanged and refresh

== Email ==

* broken progress bar of "sending" dialog ... I'll fix it later, Yuya.
* bundle support
* threaded preview
* rename module 'hgemail' to 'email' ?
* replace to/from/cc combo boxes with entry and [...] that opens address book style dialog
* perhaps changeset list could be in a second tab, before preview

== Sync ==

* Don't allow dialog (or task tab) to be closed while busy
* Problem adding new keys to keyring on Mac, worked on command line
* bundle preview when in workbench
* incoming / outgoing marks
* show related local repositories, and their configured paths
* keyring help
* need a mechanism for clearing username/passwords from URLs

== Grep ==

* add history for include and exclude names (also possible for regexp itself) as done for the latest 10 messages in the commit widget

== Annotate ==

* In the gtk version there's a possibility to assign colors to the usernames in the changelog. Maybe those same colors could be used per user in the annotate window too ? And the colors in the annotate dialog for not configured users perhaps could be assigned with the same 'logic' as in the changelog ? That would be another bit of consistency in the product. I could also add an extra page to the setting dialog, for assigning colors to usernames ? I also see the hgqt changelog does not yet use those username color settings. I could look into that too ? (If you agree with the idea(s) Steve, I (Johan) am willing to give this a stab.) -- sjb sounds like a solid idea

== qtlib ==

* replace 'yellow' with some reasonable default, like 'lightbrown'
* pre-defined colors (like gtklib) (most colors will be user-configurable - steve)
* more general means for showing or previewing the generated hg command (see archive dialog) (log widget)
* appropriate use of QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
* utilize QIcon.fromTheme() ?

== i18n ==

* Need an encode fail dialog that prompts for an encoding, sets HGENCODING, then retries
* Need functions to convert between unicode<->UTF-8

== run ==

* Catch certain Mercurial errors (RepoLookupError, etc) and provide a non-bug-report fallback for them.

== usability ==

* Fonts
** I would like to have a really good way to change fonts in the TortoiseHg qt dialogs. Mostly for enlarging fonts, but in small steps, so each can find their own "best setting". All fonts means both for dialog fonts and for content widgets. This is necessary f.i. for people not having the good sight of a youngster anymore (like me). (Also because changing screen resolution and/or OS settings cannot solve everything.) I'm willing to help with this, of course. My reference for this is the NoSquint Firefox add-on ;-).
** SJB - I've started work on this.  Apps can get the user's configured font from qtlib and connect to a signal emitted when the font is changed.  The settings tool in turn will emit the signal when the user picks a new font and selects 'ok' in the font editor.  Two things need to happen:
## We must use this font interface consistently in all our tools
## Someone should look into connecting to the live updates that come out of the selection dialog