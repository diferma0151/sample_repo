Feel free to add new categories as necessary.  See **[[FixedBugs]]**

This is the list of left-over TODOs from the initial port, and some long term ideas.  We should be placing new TODOs in the issue tracker.

== repo registry ==

* ask for name of new group at creation
* CTRL+drag looks like a copy, but actually performs a move

== qtlib ==

* qtlib.ExpanderLabel needs to manage its own sub-layout

== chunks/shelve ==

* multi-select file list
* file/diff toolbar buttons

== Revset/Filter toolbar ==

* entries in branch combo should have the configured branch color

== Workbench ==

* commit tab SVG should match shell extension icon (or vice-versa)
* paint tag names on right side of description
* limit the size (in MB) of the graph data cache.  Perhaps an LRU of revisions.

== RevDetailsWidget ==

* investigate hgview's recent support for reST in changelog messages

== Compress ==

* warn if compressing a merge
* refactor as QWizard

== status / wctxactions ==

* use Qt's filesystem monitor to report when the working folder is dirty

== rebase, bisect ==

* turn into a QWizard based dialogs

== Commit ==

* smarter commit button enabled logic (message entered, file selected, etc)
* add support for tortoisehg.ciexclude (there is a bug for this now)

== Settings ==

* path validation for ui.editor and similar fields
* new generic extension registration
* more font settings
* connect to thgrepo.configChanged and refresh

== Email ==

* show output/progress by default
** I'm thinking of single-line status, which shows the current activity, e.g.  "Sending [PATCH 0/1] xxxx". Maybe I should provide more details, though. - yuja
* clean implementation for --bundle
* replace to/from/cc combo boxes with entry and [...] that opens address book style dialog
* perhaps changeset list could be in a second tab, before preview
* drag and drop revisions from RepoWidget to email dialog.
* Maybe we should add the possibility of collapsing all csets into one patch to the Email dialog? See http://thread.gmane.org/gmane.comp.version-control.mercurial.general/25328/focus=25340

== Annotate ==

* In the gtk version there's a possibility to assign colors to the usernames in the changelog. Maybe those same colors could be used per user in the annotate window too ? (SJB - this is now complicated by the 32-color restriction in Qsci)
** And the colors in the annotate dialog for not configured users perhaps could be assigned with the same 'logic' as in the changelog
** I could also add an extra page to the setting dialog, for assigning colors to usernames?
** I also see the hgqt changelog does not yet use those username color settings. I could look into that too?
* support annotation of working copy (rev=None); needs changes on Mercurial-side.

== docklog (ConsoleWidget) ==

* pager for long outputs
* sophisticated 'thg' command, e.g. 'thg grep' to switch task tab.
* accept ctrl+c for command termination

== MQ ==

* The widget provides buttons for pushing/popping one or all patches. I miss the two that do 'push/pop up to selected patch' (=qgoto).
* It should be possible to call qfold.py from this widget.

== Rename dialog ==

* enhancement 1186 (see https://bitbucket.org/tortoisehg/hgtk/issue/1186)
* enhancement 1604 (see https://bitbucket.org/tortoisehg/hgtk/issue/1604)

== qtlib ==

* pre-defined colors (like gtklib) (most colors will be user-configurable - steve)
* appropriate use of QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)

== Bisect Dialog ==

* annotate graph with .hg/bisect.state (low priority)

== i18n ==

* Need an encode fail dialog that prompts for an encoding, sets HGENCODING, then retries

== usability ==

* Set coherent tab order in all dialogs:  http://doc.qt.nokia.com/4.7/focus.html
* Session management; QApplication::commitData()
* Enforce standard accelerators: http://doc.qt.nokia.com/4.6/accelerators.html
* More Mac OS X goodies: http://www.crossplatform.ru/?q=node/298

* Fonts
** use qtlib.getfont interface consistently in all our tools
** add runtime font scaling mechanism

== Documentation ==

* Update localized documents (as possible) ... I heard Sphinx 1.1 introduces gettext-based i18n system - yuya
