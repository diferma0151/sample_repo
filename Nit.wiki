Feel free to add new categories as necessary.

This is where you register features that are unimplemented or badly implemented in the new Qt dialogs

Features marked with {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} must be implemented before TortoiseHg 2.0 is out of beta.

== repo registry ==

* make reordering of groups (along with their content) possible (see also #52)
* multi-selection menu with 'Pull from default', 'Pull -u from default'

== General ==

* Showing MQ patches in the graph causes them to be read (_files is called), why?
* QTimer errors after revset queries or goto bar search
* limit the size (in MB) of the graph data cache.  Perhaps an LRU of revisions.
* Qsci tab stops suffer from off-by-one when showing diffs, see rejects.py for potential workaround.

== Workbench ==

* fix fileview/annotate search feature
* combine fileview annotate/sci widgets into one Qsci instance
* delete item from revset history if <del> pressed while item is highlighted
* generic progress bars for most operations, to show busy state
* Dragging of filenames does not work into Visual Studio (wrong URI type?, permissions?)
* patch csinfo in revpanel should show path to patch

== qreorder ==

* allow more than one patch to be selected for reordering as a group
* when a reorder was done, and you rename a patch via the cmenu of the list, the reordering is undone
* make the dialog show the summary with min 80 chars

== visdiff ==

* offer to launch settings tool if no diff tool is configured

== RevDetailsWidget ==

* fix 'show all' merge changeset behavior
* investigate hgview's recent support for reST in changelog messages
* space-efficient diff viewer like one of hgtk
** combine RevMessage and HgFileView (diff view) so that RevMessage can be scrolled out; current diff view is too small. (i'm not convinced this would be an improvement, please discuss on list first - sjb)
** provide a way to show all diffs at once, like "[All Files]" of hgtk. - yuja

== Compress ==

* warn if compressing a merge

== Manifest Viewer ==

* GOAL: merge functionality with revDetailsWidget (after 2.0 release)

* margins grow as you change revisions
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} right-clicking on files should allow a diff-to-parent for affected files only.
* interface to grep at revision
* Complete the annotate view with the hovering info as in the separate annotate dialog ?
* filter files by name.
* indicate affected folders by overlay icon or font style, like the 'Changes' column in the Gtk version.
* change filename color by status (see the status view).
* support 'unknown' and 'ignored' files for working copy.
* show also subrepo tree
* flat view for files list
* ability to show changeset description
* merge with annotate dialog? with optional filetree dock.

== Commit ==

* disable fileview mode toggles when model is empty, or set _filename to None
* smarter commit button enabled logic
* add support for tortoisehg.ciexclude
* spell check (perhaps there's an http service we can use for post-validation?)
* in-memory patching / committing chunk selected files

== grep ==

* [del] to remove completions
* give match line context menus a default action (annotate or edit)
* include/exclude textboxes should mention file paths

== Clone ==

* clone --pull's progress bars cause the dialog to grow horizontally dynamically.. ugh.  I propose we filter the progress events and elipsize (is that a verb?) the progress strings.

== Settings ==

* unicode decode issues
* path validation for ui.editor and similar fields
* new generic extension registration
* more font settings
* new [color] page
* connect to thgrepo.configChanged and refresh
* 'issue tracking' page (bugtraq)

== update ==

* use cmdui.Runner when running from the workbench

== SSL ==

Look into leveraging http://doc.trolltech.com/4.7/qsslsocket.html for extracting
CA certificates from Windows.

== Email ==

* show output/progress by default
** I'm thinking of single-line status, which shows the current activity, e.g.  "Sending [PATCH 0/1] xxxx". Maybe I should provide more details, though. - yuja
* clean implementation for --bundle
* threaded preview
* replace to/from/cc combo boxes with entry and [...] that opens address book style dialog
* perhaps changeset list could be in a second tab, before preview
* drag and drop revisions from RepoWidget to email dialog.

== Sync ==

* ensure pull from bundle works as expected after latest changes
* expose default-push in some way
* write keyring/auth help
* keyring doesn't work on KDE (with KWallet). It looks threading issue. See
  http://bitbucket.org/tortoisehg/stable/issue/1437/gui-freeze-on-suse-linux-after-
using

== Annotate ==

* In the gtk version there's a possibility to assign colors to the usernames in the changelog. Maybe those same colors could be used per user in the annotate window too ? And the colors in the annotate dialog for not configured users perhaps could be assigned with the same 'logic' as in the changelog ? That would be another bit of consistency in the product. I could also add an extra page to the setting dialog, for assigning colors to usernames ? I also see the hgqt changelog does not yet use those username color settings. I could look into that too ? (If you agree with the idea(s) Steve, I (Johan) am willing to give this a stab.) -- sjb sounds like a solid idea

* Replace HgView's annotator by thg's. Hook at fileview.HgFileView.
* username margin
* support annotation of working copy (rev=None); needs changes on Mercurial-side.

== docklog (ConsoleWidget) ==

* command completion by TAB key
* command history by up/down key
* pager for long outputs
* sophisticated 'thg' command, e.g. 'thg grep' to switch task tab.
* accept ctrl+c for command termination
* delay repo switch while running command

== Rename dialog ==

* implement enhancements from issues 1124 + 1186
* enhancement #1604

== qtlib ==

* pre-defined colors (like gtklib) (most colors will be user-configurable - steve)
* appropriate use of QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
* utilize QIcon.fromTheme() (we should probably adopt a standardized naming scheme first)?

== Bisect Dialog ==

* Connect repoview clicks to dialog input events (must be non-modal, low priority)
* annotate graph with .hg/bisect.state (low priority)

== About ==

* Freeze on closing dialog until urllib2.urlopen() finishes (uthread.wait() blocks main thread)
** In this case, thread2._async_raise() trick does not work. Needs unblocking io or short timeout value, at least. (SJB this is a Python limitation, not likely to be fixed by our code).
*** Yes, but some workarounds are necessary IMO. It always freezes 10sec or so where internet connection needs http proxy. - yuya

== i18n ==

* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Update i18n message catalog for PyQt port
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Fix possible unicode-related issues
* Need an encode fail dialog that prompts for an encoding, sets HGENCODING, then retries
* Utilize Mercurial's localstr if possible: http://selenic.com/repo/hg/rev/7cc4263e07a9
* Content encoding for diff / annotate view; Maybe it has fallback list by locale, e.g. 'utf-8, cp932, euc-jp, iso-2022-jp' for ja_JP.

== usability ==

* Set coherent tab order in all dialogs:  http://doc.qt.nokia.com/4.7/focus.html
* Session management; QApplication::commitData()
* Enforce standard accelerators: http://doc.qt.nokia.com/4.6/accelerators.html
* More Mac OS X goodies: http://www.crossplatform.ru/?q=node/298

* Fonts
** use qtlib.getfont interface consistently in all our tools
** add runtime font scaling mechanism
* Respect Windows font setting like modern apps:
  http://groups.google.co.jp/group/thg-dev/browse_thread/thread/5f9bb7141e4f66e3

== Documentation ==

* Go through hglib and move applicable routines to thgrepo, fix hgqt usage
* {{http://jira.atlassian.com/images/icons/newfeature.gif|2.0 blocker}} Update documentation
* Update localized documents (as possible) ... I heard Sphinx 1.1 introduces gettext-based i18n system - yuya